#include <iostream> // Подключение библиотеки для ввода-вывода
#include <string> // Подключение библиотеки для работы со строками
#include <vector> // Подключение библиотеки для работы с векторами
#include <memory> // Подключение библиотеки для работы с умными указателями
#include "Document.h" // Подключение заголовка Document.h, который содержит определение класса Document
#include "Primitive.h" // Подключение заголовка Primitive.h, который содержит определение класса Primitive и его производных
// #include "Rectangle.h" // Закомментированное подключение заголовка Rectangle.h (не требуется, так как Rectangle уже включен через Primitive)
#include "DocumentController.h" // Подключение заголовка DocumentController.h, который содержит определение класса DocumentController

// Представление (GUI) - очень упрощенная реализация для демонстрации
void printMenu() { // Функция для отображения меню действий
    std::cout << "\nВыберите действие:\n"; // Вывод заголовка меню
    std::cout << "1. Создать документ\n"; // Опция для создания документа
    std::cout << "2. Открыть документ\n"; // Опция для открытия документа
    std::cout << "3. Сохранить документ\n"; // Опция для сохранения документа
    std::cout << "4. Удалить документ\n"; // Опция для удаления документа
    std::cout << "5. Добавить примитив\n"; // Опция для добавления примитива в документ
    std::cout << "6. Удалить примитив\n"; // Опция для удаления примитива из документа
    std::cout << "7. Выход\n"; // Опция для выхода из программы
    std::cout << "Введите номер действия: "; // Запрос ввода номера действия у пользователя
}

int main() { // Главная функция программы
    std::shared_ptr<DocumentController> controller = std::make_shared<DocumentController>(); // Создание умного указателя на объект DocumentController

    while (true) { // Бесконечный цикл для обработки пользовательских действий
        printMenu(); // Вызов функции для отображения меню действий
        int choice; // Переменная для хранения выбора пользователя
        std::cin >> choice; // Считывание выбора пользователя с ввода

        switch (choice) { // Проверка выбора пользователя с помощью оператора switch
            case 1: // Если выбран пункт 1 - создание документа
                controller->createDocument(); // Вызов метода создания документа у контроллера
                break; // Завершение обработки текущего выбора

            case 2: { // Если выбран пункт 2 - открытие документа
                std::string filename; // Переменная для хранения имени файла
                std::cout << "Введите имя файла: "; // Запрос имени файла у пользователя
                std::cin >> filename; // Считывание имени файла с ввода
                controller->openDocument(filename); // Вызов метода открытия документа у контроллера с указанным именем файла
                break; // Завершение обработки текущего выбора
            }

            case 3: { // Если выбран пункт 3 - сохранение документа
                std::string filename; // Переменная для хранения имени файла
                std::cout << "Введите имя файла: "; // Запрос имени файла у пользователя
                std::cin >> filename; // Считывание имени файла с ввода
                controller->saveDocument(filename); // Вызов метода сохранения документа у контроллера с указанным именем файла
                break; // Завершение обработки текущего выбора
            }

            case 4: { // Если выбран пункт 4 - удаление документа
                std::string filename; // Переменная для хранения имени файла
                std::cout << "Введите имя файла: "; // Запрос имени файла у пользователя
                std::cin >> filename; // Считывание имени файла с ввода
                controller->removeDocument(filename); // Вызов метода удаления документа у контроллера с указанным именем файла
                break; // Завершение обработки текущего выбора
            }

            case 5: { // Если выбран пункт 5 - добавление примитива в документ
                std::cout << "Введите тип примитива (rectangle, square, circle, triangle...): "; // Запрос типа примитива у пользователя
                std::string type; // Переменная для хранения типа примитива 
                std::cin >> type; // Считывание типа примитива с ввода 
                controller->addPrimitive(type); // Вызов метода добавления примитива у контроллера с указанным типом 
                break; // Завершение обработки текущего выбора 
            }

            case 6: { // Если выбран пункт 6 - удаление примитива из документа 
                std::cout << "Введите тип примитива (rectangle, square, circle, triangle...): ";  // Запрос типа примитива у пользователя 
                std::string type;  // Переменная для хранения типа примитива 
                std::cin >> type;  // Считывание типа примитива с ввода 
                std::cout << "Введите имя примитива: ";  // Запрос имени примитива у пользователя 
                std::string nameToRemove;  // Переменная для хранения имени примитива 
                std::cin >> nameToRemove;  // Считывание имени примитива с ввода 
                controller->removePrimitive(nameToRemove, type);  // Вызов метода удаления примитива у контроллера с указанным именем и типом 
                break;  // Завершение обработки текущего выбора 
            }

            case 7:  // Если выбран пункт 7 - выход из программы 
                std::cout << "Выход...\n";  // Вывод сообщения о выходе 
                return 0;  // Завершение программы 

            default:  // Если введен некорректный выбор 
                std::cout << "Некорректный выбор.\n";  // Вывод сообщения об ошибке 
        }
    }
} 